{
  "paths": [
    {
      "type": "file",
      "value": "index.md"
    },
    {
      "type": "file",
      "value": "asgi-dispatcher-middleware.md"
    },
    {
      "type": "file",
      "value": "clojure-unknown-tool-tools.md"
    },
    {
      "type": "file",
      "value": "django-apps-in-a-polylith.md"
    },
    {
      "type": "file",
      "value": "mongodb-mass-removing-nested-array-element-property.md"
    },
    {
      "type": "file",
      "value": "needlestack.md"
    },
    {
      "type": "file",
      "value": "python-pydantic-unprintable-validationerror-object.md"
    },
    {
      "type": "file",
      "value": "routing-pattern-for-html6-htmx-applications.md"
    },
    {
      "type": "file",
      "value": "solana-mental-model.md"
    },
    {
      "type": "file",
      "value": "xfce4-slock-red-screen.md"
    },
    {
      "type": "file",
      "value": "xinput-synaptics-disable-while-typing.md"
    }
  ],
  "contents": [
    {
      "path": "index.md",
      "url": "index.html",
      "content": "# Welcome to this notebook!\n\nHere I write notes about obscure or forgettable issues I commonly have to deal with.\n\n---\n\n<iframe src=\"https://microads.ftp.sh/api/ads/delivery-node/random?nonce=abc123\"></iframe>",
      "html": "<h1 id=\"welcome-to-this-notebook!\">Welcome to this notebook! <a class=\"heading-anchor-permalink\" href=\"#welcome-to-this-notebook!\">#</a></h1>\n<p>Here I write notes about obscure or forgettable issues I commonly have to deal with.</p>\n<hr>\n<iframe src=\"https://microads.ftp.sh/api/ads/delivery-node/random?nonce=abc123\"></iframe>",
      "id": 0
    },
    {
      "path": "asgi-dispatcher-middleware.md",
      "url": "asgi-dispatcher-middleware.html",
      "content": "# ASGI dispatcher middleware\n\nThere is, sometimes, a scenario in which two or more different Python web frameworks have to be ran at the same location.\n\nUsually one would start two different runtimes and point a reverse proxy to two different servers behind slightly different subdomains/subdirectories (paths) and call it a day.\nThis works for any kind of combination of HTTP servers and programming languages they are implemented in.\n\nHowever, there are also scenarios where best course of action would be to have the exact same runtime/interpreter serve multiple different web servers.\nThis is also possible in a way but what if we want to go a step further and have the exact same interpreter/runtime and the exact same TCP server serve multiple different web applications implemented in multiple different codebases?\n\n### Solution\n\n<iframe src=\"https://microads.ftp.sh/api/ads/delivery-node/direct?nonce=abc123\t\"></iframe>\n\nEnter Werkzeug Dispatcher Middleware.\n\nBut first, a quick detour for a primer on WSGI;\n\nPython WSGI standard is a specification contract forcing web-application developers to conform to a single behavior:\n\n1. a web app starts with a single Python function\n2. the function takes in two arguments, a request environment and a typing.Callable\n3. the function uses request environment to create a response (in reality this is the application entrypoint)\n4. the function calls the typing.Callable it was given with a status code and response headers\n5. the function returns a typing.Iterable of response body(/ies)\n\nThis means every single web application conforming to this standard works exactly the same.\n\n--\n\nBack to Dispatcher Middleware;\n\na dispatcher is an entrypoint, a WSGI application that passes requests through to other WSGI applications.\nRemember how all WSGI applications need to conform to a specific structure? What it means is - you can dynamically decide which applications are used in which scenarios. Yes that includes Django and Flask (and probably many other combinations).\n\nWerkzeug (and probably many more) packages provide this in one way or another, but for WSGI.\n\nWhat about ASGI?\n\nYou will find a couple packages on Pypi addressing this case but mostly one-off packages written and maintained by one person, which might not be suitable for your requirements.\n\n---\n\nWhy one person? Because you can write one yourself in a 16 line function with 0 (zero) dependencies:\n\n```python\nasync def dispatch(scope, receive, send):                                       \n    default_app = djangoapp                                                     \n    patterns: dict = {\"/flask\": flaskapp, \"/django\": djangoapp}                       \n\n    app = None                                                                  \n                                                                                \n    for _path, _app in patterns.items():                                        \n        if not _path.startswith(scope[\"path\"]):                                 \n            continue                                                            \n                                                                                \n        app = _app                                                              \n        break                                                                   \n                                                                                \n    if app is None:                                                             \n        app = default_app                                                       \n                                                                                \n    await app(scope, receive, send)\n```\n\nYou can add as many improvements and changes to this as you'd like it's just a minimal working example and I didn't yet go into type definitions or performance improvements.\n\nAll credit goes to c-bata (https://github.com/c-bata, https://c-bata.medium.com/) their github gist is where I finally figured out the dots to connect: https://gist.github.com/c-bata/b77f068fc1a16e55792e8b6154dd8354",
      "html": "<h1 id=\"asgi-dispatcher-middleware\">ASGI dispatcher middleware <a class=\"heading-anchor-permalink\" href=\"#asgi-dispatcher-middleware\">#</a></h1>\n<p>There is, sometimes, a scenario in which two or more different Python web frameworks have to be ran at the same location.</p>\n<p>Usually one would start two different runtimes and point a reverse proxy to two different servers behind slightly different subdomains/subdirectories (paths) and call it a day.\nThis works for any kind of combination of HTTP servers and programming languages they are implemented in.</p>\n<p>However, there are also scenarios where best course of action would be to have the exact same runtime/interpreter serve multiple different web servers.\nThis is also possible in a way but what if we want to go a step further and have the exact same interpreter/runtime and the exact same TCP server serve multiple different web applications implemented in multiple different codebases?</p>\n<h3 id=\"solution\">Solution <a class=\"heading-anchor-permalink\" href=\"#solution\">#</a></h3>\n<iframe src=\"https://microads.ftp.sh/api/ads/delivery-node/direct?nonce=abc123\t\"></iframe>\n<p>Enter Werkzeug Dispatcher Middleware.</p>\n<p>But first, a quick detour for a primer on WSGI;</p>\n<p>Python WSGI standard is a specification contract forcing web-application developers to conform to a single behavior:</p>\n<ol>\n<li>a web app starts with a single Python function</li>\n<li>the function takes in two arguments, a request environment and a typing.Callable</li>\n<li>the function uses request environment to create a response (in reality this is the application entrypoint)</li>\n<li>the function calls the typing.Callable it was given with a status code and response headers</li>\n<li>the function returns a typing.Iterable of response body(/ies)</li>\n</ol>\n<p>This means every single web application conforming to this standard works exactly the same.</p>\n<p>–</p>\n<p>Back to Dispatcher Middleware;</p>\n<p>a dispatcher is an entrypoint, a WSGI application that passes requests through to other WSGI applications.\nRemember how all WSGI applications need to conform to a specific structure? What it means is - you can dynamically decide which applications are used in which scenarios. Yes that includes Django and Flask (and probably many other combinations).</p>\n<p>Werkzeug (and probably many more) packages provide this in one way or another, but for WSGI.</p>\n<p>What about ASGI?</p>\n<p>You will find a couple packages on Pypi addressing this case but mostly one-off packages written and maintained by one person, which might not be suitable for your requirements.</p>\n<hr>\n<p>Why one person? Because you can write one yourself in a 16 line function with 0 (zero) dependencies:</p>\n<pre><code class=\"language-python\">async def dispatch(scope, receive, send):                                       \n    default_app = djangoapp                                                     \n    patterns: dict = {&quot;/flask&quot;: flaskapp, &quot;/django&quot;: djangoapp}                       \n\n    app = None                                                                  \n                                                                                \n    for _path, _app in patterns.items():                                        \n        if not _path.startswith(scope[&quot;path&quot;]):                                 \n            continue                                                            \n                                                                                \n        app = _app                                                              \n        break                                                                   \n                                                                                \n    if app is None:                                                             \n        app = default_app                                                       \n                                                                                \n    await app(scope, receive, send)\n</code></pre>\n<p>You can add as many improvements and changes to this as you’d like it’s just a minimal working example and I didn’t yet go into type definitions or performance improvements.</p>\n<p>All credit goes to c-bata (<a href=\"https://github.com/c-bata\">https://github.com/c-bata</a>, <a href=\"https://c-bata.medium.com/\">https://c-bata.medium.com/</a>) their github gist is where I finally figured out the dots to connect: <a href=\"https://gist.github.com/c-bata/b77f068fc1a16e55792e8b6154dd8354\">https://gist.github.com/c-bata/b77f068fc1a16e55792e8b6154dd8354</a></p>\n",
      "id": 1
    },
    {
      "path": "clojure-unknown-tool-tools.md",
      "url": "clojure-unknown-tool-tools.html",
      "content": "# Unknown tool: tools\n\nCommonly presents as an error during an attempt to add Sean Corfield's \"new\" like so\n\n```\nclojure -Ttools install com.github.seancorfield/clj-new '{:git/tag \"v1.2.381\"}' :as new\n```\n\nand the error \n\n```Error building classpath. Unknown tool: tools```\n\n### Solution\n\n<iframe src=\"https://microads.ftp.sh/api/ads/delivery-node/direct?nonce=abc123\t\"></iframe>\n\n(https://clojurians-log.clojureverse.org/clj-on-windows/2022-09-01) is to create `~/.clojure/tools/tools.edn` and add in\n\n```\n{:lib io.github.clojure/tools.tools\n :coord {:git/tag \"v0.2.8\"\n         :git/sha \"9c5baa56cff02de98737a71d4dab098b268cd68b\"}}\n\n```\nor newer before re-running.\n",
      "html": "<h1 id=\"unknown-tool%3A-tools\">Unknown tool: tools <a class=\"heading-anchor-permalink\" href=\"#unknown-tool%3A-tools\">#</a></h1>\n<p>Commonly presents as an error during an attempt to add Sean Corfield’s “new” like so</p>\n<pre><code>clojure -Ttools install com.github.seancorfield/clj-new '{:git/tag &quot;v1.2.381&quot;}' :as new\n</code></pre>\n<p>and the error</p>\n<p><code>Error building classpath. Unknown tool: tools</code></p>\n<h3 id=\"solution\">Solution <a class=\"heading-anchor-permalink\" href=\"#solution\">#</a></h3>\n<iframe src=\"https://microads.ftp.sh/api/ads/delivery-node/direct?nonce=abc123\t\"></iframe>\n<p>(<a href=\"https://clojurians-log.clojureverse.org/clj-on-windows/2022-09-01\">https://clojurians-log.clojureverse.org/clj-on-windows/2022-09-01</a>) is to create <code>~/.clojure/tools/tools.edn</code> and add in</p>\n<pre><code>{:lib io.github.clojure/tools.tools\n :coord {:git/tag &quot;v0.2.8&quot;\n         :git/sha &quot;9c5baa56cff02de98737a71d4dab098b268cd68b&quot;}}\n\n</code></pre>\n<p>or newer before re-running.</p>\n",
      "id": 2
    },
    {
      "path": "django-apps-in-a-polylith.md",
      "url": "django-apps-in-a-polylith.html",
      "content": "# Django apps in a Polylith\n\nThe problem: how to organize a Django setup with multiple apps within a polylith.\n\n## Definitions\n\nBefore anything let's define what things are.\nWhat's a Django, why does it matter, what are apps, and what's a Polylith?\n\n###  What's a Django and why does it matter\n\nDjango's a Python web framework (https://en.wikipedia.org/wiki/Web_framework), and while there are many frameworks in many languages (https://en.wikipedia.org/wiki/Web_framework#General-purpose_website_frameworks) what makes Django unique is its concept of apps. Reusable apps within a single monolithic web application.\n\n### What are apps\n\nIt might not make sense at first but consider first that you might need reusable apps that you might want to install to your clients' servers.\nOne example would be if you specialize in e-commerce and you've got clients that have\n\n- an online catalog and\n- they have kiosks in their physical stores where their customers can do some subset of operations with the catalog and\n- they might also have sales/customer support staff which needs to use yet another user interface and\n- they might need a special portal that their accounting department uses to work with financial data and\n- they might need a special portal for their warehouse/distribution staff\n- and so on and so forth\n\nHow do you handle all that? Even if they need only one of these and not any others it's useful to be able to simply plug another - similar or entirely different from the primary - application into the ecosystem.\n\nDjango lets you do this with these apps. Even if it's fundamentally one and the same \"portal\" you can leverage apps to make domain boundaries (domain as in domain driven design) or break each app into its own process/runtime and its own Django setup and what've you got? Microservices!\n\n### What's a polylith\n\nA polylith is monorepo containing the entirety of a project broken down into microservices, in a sane structure, allowing for both code reuse and clear distinction between deployable artifacts.\nThere is tooling for it (primarily CLI) where you instruct a tool to manage the system but everything can be done with symlinks and - if necessary - reification (copying the linked directory) and reset. I generally don't use reification but when I do I use `git checkout` to reset a reified directory back into a symlink in order to reify it with updated content. The last point I just want to ensure we both understand it's possible but it's really just advanced usage and I wouldn't think too much about it in the beginning.\n\nRead more here https://polylith.gitbook.io/polylith/.\n\nTo quickly grok why polylith might work for you imagine for a second that same e-commerce software product you're selling to customers which've got warehouse portsl, sales & support portals, accountants, in-shop kiosks, online catalogs etc all dealing with the same data.\n\nLet's say hypothetically each of these portals has a UI of some kind and it either talks to its own specialized API or is self contained in some way.\n\nWith a polylith you'd have something like (# => these are my comments)\n\n```\ne-commerce/\n├── bases\n│   └── ecom\n│       ├── accounting\n│       │   └── app.py # => a multiplatform QT desktop application\n│       ├── kiosk\n│       │   ├── app.py # => API for kiosk mobile app\n│       │   └── src\n│       │       ├── app.jsx # => kiosk mobile app\n│       │       ├── components\n│       │       ├── hooks\n│       │       ├── index.jsx\n│       │       ├── pages\n│       │       ├── router.jsx\n│       │       ├── screens\n│       │       ├── services\n│       │       ├── store\n│       │       └── utils\n│       ├── sales\n│       │   ├── app.py # => API for sales SPA\n│       │   └── src\n│       │       ├── app.jsx # => complex sales SPA\n│       │       ├── components\n│       │       ├── features\n│       │       ├── hooks\n│       │       ├── index.jsx\n│       │       ├── pages\n│       │       ├── router.jsx\n│       │       ├── services\n│       │       ├── store\n│       │       └── utils\n│       ├── support\n│       │   ├── app.py # => a flask MPA for support staff\n│       ├── warehouse\n│       │   ├── app.py # => an API for warehouse mobile app\n│       │   └── src\n│       │       ├── app.jsx # => mobile app for warehouse staff\n│       │       ├── components\n│       │       ├── hooks\n│       │       ├── index.jsx\n│       │       ├── pages\n│       │       ├── router.jsx\n│       │       ├── screens\n│       │       ├── services\n│       │       ├── store\n│       │       └── utils\n│       └── webshop\n│           ├── app.py # => an API for the webshop\n│           └── src\n│               ├── app.jsx # => a rich full stack (SPA + SSR) webshop app\n│               ├── components\n│               ├── features\n│               ├── hooks\n│               ├── index.jsx\n│               ├── pages\n│               ├── router.jsx\n│               ├── services\n│               ├── store\n│               └── utils\n├── components\n│   ├── ecom\n│   │   ├── lib # => shared libraries, reusable throughout the system\n│   │   │   ├── fsutils.py\n│   │   │   ├── money.py\n│   │   │   └── webutils.py\n│   │   └── tool # => shared tooling, reusable throughout the system\n│   │       ├── addresses.py\n│   │       ├── analytics.py\n│   │       ├── csv_map.py\n│   │       └── email.py\n│   └── ops # => ...\n├── Makefile\n├── projects\n│   ├── accounting-linux # => deployable artifact (binary) for linux desktop\n│   │   ├── ecom\n│   │   │   ├── accounting -> ../../../bases/ecom/accounting/\n│   │   │   ├── lib -> ../../../components/ecom/lib\n│   │   │   └── tool -> ../../../components/ecom/tool\n│   │   ├── main.py\n│   │   └── requirements.txt\n│   ├── accounting-osx # => deployable artifact (binary) for OSX desktop\n│   │   ├── ecom\n│   │   │   ├── accounting -> ../../../bases/ecom/accounting/\n│   │   │   ├── lib -> ../../../components/ecom/lib\n│   │   │   └── tool -> ../../../components/ecom/tool\n│   │   ├── main.py\n│   │   └── requirements.txt\n│   ├── accounting-win # => deployable artifact (binary) for Windows desktop \n│   │   ├── ecom\n│   │   │   ├── accounting -> ../../../bases/ecom/accounting/\n│   │   │   ├── lib -> ../../../components/ecom/lib\n│   │   │   └── tool -> ../../../components/ecom/tool\n│   │   ├── main.py\n│   │   └── requirements.txt\n│   ├── kiosk-api # => deployable (k8s/docker/etc) API server\n│   │   ├── ecom\n│   │   │   ├── kiosk -> ../../../bases/ecom/kiosk/\n│   │   │   ├── lib -> ../../../components/ecom/lib\n│   │   │   └── tool -> ../../../components/ecom/tool\n│   │   ├── main.py\n│   │   └── requirements.txt\n│   ├── kiosk-mobile # => deployable (app store/apk/ipa) mobile app\n│   │   ├── ecom\n│   │   │   ├── kiosk -> ../../../bases/ecom/kiosk/\n│   │   │   ├── lib -> ../../../components/ecom/lib\n│   │   │   └── tool -> ../../../components/ecom/tool\n│   │   ├── main.py\n│   │   └── requirements.txt\n│   ├── sales-api # => ...\n│   │   ├── ecom\n│   │   │   ├── lib -> ../../../components/ecom/lib\n│   │   │   ├── sales -> ../../../bases/ecom/sales/\n│   │   │   └── tool -> ../../../components/ecom/tool\n│   │   ├── main.py\n│   │   └── requirements.txt\n│   ├── sales-app # => deployable SPA\n│   │   ├── ecom\n│   │   │   └── sales -> ../../../bases/ecom/sales/\n│   │   ├── index.js\n│   │   └── package.json\n│   ├── support-app # => deployable (k8s/docker/etc) MPA server\n│   │   ├── ecom\n│   │   │   ├── lib -> ../../../components/ecom/lib\n│   │   │   ├── support -> ../../../bases/ecom/support/\n│   │   │   └── tool -> ../../../components/ecom/tool\n│   │   ├── main.py\n│   │   └── requirements.txt\n│   ├── warehouse-api # => ...\n│   │   ├── ecom\n│   │   │   ├── lib -> ../../../components/ecom/lib\n│   │   │   ├── tool -> ../../../components/ecom/tool\n│   │   │   └── warehouse -> ../../../bases/ecom/warehouse/\n│   │   ├── main.py\n│   │   └── requirements.txt\n│   ├── warehouse-mobile # => ...\n│   │   ├── ecom\n│   │   │   └── warehouse -> ../../../bases/ecom/warehouse/\n│   │   ├── index.js\n│   │   └── package.json\n│   ├── webshop-api # => ...\n│   │   ├── ecom\n│   │   │   ├── lib -> ../../../components/ecom/lib\n│   │   │   ├── tool -> ../../../components/ecom/tool\n│   │   │   └── webshop -> ../../../bases/ecom/webshop\n│   │   ├── main.py\n│   │   └── requirements.txt\n│   └── webshop-app # => deployable full stack app\n│       ├── ecom\n│       │   └── webshop -> ../../../bases/ecom/webshop\n│       ├── index.js\n│       └── package.json\n└── README.md\n```\nJust imagine trying to write code for an ecosystem of this complexity. Then try and imagine how much time and effort and >>cognitive load<< it would take to handle its SDLC.\n\nPolylith puts it all into a single monorepo but helps you with clear separation of what belongs where and why.\n\nMassive props to Joakim Tengstrand, Furkan Bayaraktar, and James Trunk for essentially inventing and creating Polylith as a concept (https://polylith.gitbook.io/polylith/conclusion/who-made-polylith) and of course props to David Vujic for Python tooling (and many many helpful blogs! https://davidvujic.blogspot.com/) for Polylith https://davidvujic.github.io/python-polylith-docs/\n\nSo...\n\nback to architecture conundrum - how to fit Django apps into a Polylith?\n\n## Solution\n\n<iframe src=\"https://microads.ftp.sh/api/ads/delivery-node/random?nonce=abc123\"></iframe>\n\nSo, two problems with Django apps, and they both stem from how Django is supposed to be set up.\n\nUsually you would either install django globally or\n\n1. init the root project\n2. add django itself as a dependency (either via a package manager or by making a venv and doing `.venv/bin/pip3 install django`)\n3. once django is installed you can now do `./venv/bin/django-admin` to `startproject` (this makes the Django base setup)\n4. use `startapp` to create additional apps for the project, all sitting alongsite the Django base\n\nand it would look like \n\n```\nScript started on 2025-09-02 22:38:40+02:00 [TERM=\"xterm-256color\" TTY=\"/dev/pts/6\" COLUMNS=\"80\" LINES=\"24\"]\nuser1@machine1:~$ cd /tmp\nuser1@machine1:/tmp$ mkdir mysystem && cd mysystem\nuser1@machine1:/tmp/mysystem$ pyenv local 3.13\nuser1@machine1:/tmp/mysystem$ python3 --version\nPython 3.13.5\nuser1@machine1:/tmp/mysystem$ python3 -m venv .venv\n.venv/binuser1@machine1:/tmp/mysystem$ .venv/bin/pip3 install django==5.2.5\nCollecting django==5.2.5\n  Downloading django-5.2.5-py3-none-any.whl.metadata (4.1 kB)\nCollecting asgiref>=3.8.1 (from django==5.2.5)\n  Downloading asgiref-3.9.1-py3-none-any.whl.metadata (9.3 kB)\nCollecting sqlparse>=0.3.1 (from django==5.2.5)\n  Downloading sqlparse-0.5.3-py3-none-any.whl.metadata (3.9 kB)\nDownloading django-5.2.5-py3-none-any.whl (8.3 MB)\n   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 8.3/8.3 MB 21.0 MB/s eta 0:00:00\n.Downloading asgiref-3.9.1-py3-none-any.whl (23 kB)\nDownloading sqlparse-0.5.3-py3-none-any.whl (44 kB)\nInstalling collected packages: sqlparse, asgiref, django\nSuccessfully installed asgiref-3.9.1 django-5.2.5 sqlparse-0.5.3\n\n[notice] A new release of pip is available: 25.1.1 -> 25.2\n[notice] To update, run: /tmp/mysystem/.venv/bin/python3 -m pip install --upgrade pip\nuser1@machine1:/tmp/mysystem$ .venv/bin/pip3 freeze > requirements.txt\nuser1@machine1:/tmp/mysystem$ .venv/bin/django-admin startproject core .\nuser1@machine1:/tmp/mysystem$ ls\ncore  manage.py  requirements.txt\nuser1@machine1:/tmp/mysystem$ .venv/bin/python3 manage.py startapp firstapp\nuser1@machine1:/tmp/mysystem$ ls\ncore  firstapp  manage.py  requirements.txt\nuser1@machine1:/tmp/mysystem$ .venv/bin/python3 manage.py startapp secondapp\nuser1@machine1:/tmp/mysystem$ ls\ncore  firstapp  manage.py  requirements.txt  secondapp\nuser1@machine1:/tmp/mysystem$ .venv/bin/python3 manage.py runserver\nWatching for file changes with StatReloader\nPerforming system checks...\n\nSystem check identified no issues (0 silenced).\n\nYou have 18 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): admin, auth, contenttypes, sessions.\nRun 'python manage.py migrate' to apply them.\nSeptember 02, 2025 - 20:57:43\nDjango version 5.2.5, using settings 'core.settings'\nStarting development server at http://127.0.0.1:8000/\nQuit the server with CONTROL-C.\n\nWARNING: This is a development server. Do not use it in a production setting. Use a production WSGI or ASGI server instead.\nFor more information on production servers see: https://docs.djangoproject.com/en/5.2/howto/deployment/\n[02/Sep/2025 20:57:47] \"GET / HTTP/1.1\" 200 12068\nNot Found: /favicon.ico\n[02/Sep/2025 20:57:47] \"GET /favicon.ico HTTP/1.1\" 404 2206\n^Cuser1@machine1:/tmp/mysystem$ exit\nexit\n\nScript done on 2025-09-02 22:57:52+02:00 [COMMAND_EXIT_CODE=\"0\"]\n```\n\nSo what you end up with is a django core and one (or many) django apps at the same level, and this way you can configure the apps in the core (this is required of course). Any deviation from this pattern will cause a lot of pain in terms of import paths and namings/configurations.\n\nTo translate this into a polylith, because of course we won't be cramming everything into a single `base`, we have two options\n\n- make a new base for each django app (which can make sense in some situations) or\n- make a new component for each django app (which I went with for my project)\n\nand the second IMHO makes much more sense. Not only are django apps reusable so they fit as a component but different combinations of apps can be used by multiple different Django artifacts (an admin UI is one simple example).\n\nThis way you can mix and match django apps together with multiple different django systems. Here's an example of a personal project of mine where a django system with `primaryapp` brings in multiple other apps as components:\n\n```\n.\n├── bases\n│   └── myproject\n│       ├── ...\n│       └── webapp\n│           ├── asgi.py\n│           ├── __init__.py\n│           ├── settings.py\n│           ├── urls.py\n│           └── wsgi.py\n│...\n├── components\n│   ├── djangoapps\n│   │   ├── sideapp1\n│   │   │   ├── admin.py\n│   │   │   ├── apps.py\n│   │   │   ├── __init__.py\n│   │   │   ├── migrations\n│   │   │   │   └── __init__.py\n│   │   │   ├── models.py\n│   │   │   ├── tests.py\n│   │   │   └── views.py\n│   │   ├── sideapp2\n│   │   │   ├── admin.py\n│   │   │   ├── apps.py\n│   │   │   ├── __init__.py\n│   │   │   ├── migrations\n│   │   │   │   └── __init__.py\n│   │   │   ├── models.py\n│   │   │   ├── __pycache__\n│   │   │   ├── tests.py\n│   │   │   └── views.py\n│   │   ├── sideapp3\n│   │   │   ├── admin.py\n│   │   │   ├── apps.py\n│   │   │   ├── __init__.py\n│   │   │   ├── migrations\n│   │   │   │   └── __init__.py\n│   │   │   ├── models.py\n│   │   │   ├── tests.py\n│   │   │   └── views.py\n│   │   ├── sideapp4\n│   │   │   ├── admin.py\n│   │   │   ├── apps.py\n│   │   │   ├── __init__.py\n│   │   │   ├── migrations\n│   │   │   │   └── __init__.py\n│   │   │   ├── models.py\n│   │   │   ├── tests.py\n│   │   │   └── views.py\n│   │   └── primaryapp\n│   │       ├── admin.py\n│   │       ├── apps.py\n│   │       ├── components.py\n│   │       ├── __init__.py\n│   │       ├── migrations\n│   │       │   └── __init__.py\n│   │       ├── models.py\n│   │       ├── tests.py\n│   │       ├── urls.py\n│   │       └── views.py\n│   └── myproject\n│...\n└── projects\n    ├── ...\n    ├── myproject-webapp\n    │   ├── ...\n    │   ├── Makefile\n    │   ├── README.md\n    │   ├── requirements.txt\n    │   └── myproject\n    │       ├── sideapp1 -> ../../../components/djangoapps/sideapp1\n    │       ├── manage.py\n    │       ├── sideapp2 -> ../../../components/djangoapps/sideapp2\n    │       ├── sideapp3 -> ../../../components/djangoapps/sideapp3\n    │       ├── sideapp4 -> ../../../components/djangoapps/sideapp4\n    │       ├── primaryapp -> ../../../components/djangoapps/primaryapp\n    │       └── webapp -> ../../../bases/myproject/webapp\n    └── ...\n        └── ...\n```\n\nIf you have questions or suggestions shoot me an e-mail, at apocpublic@outlook.com.",
      "html": "<h1 id=\"django-apps-in-a-polylith\">Django apps in a Polylith <a class=\"heading-anchor-permalink\" href=\"#django-apps-in-a-polylith\">#</a></h1>\n<p>The problem: how to organize a Django setup with multiple apps within a polylith.</p>\n<h2 id=\"definitions\">Definitions <a class=\"heading-anchor-permalink\" href=\"#definitions\">#</a></h2>\n<p>Before anything let’s define what things are.\nWhat’s a Django, why does it matter, what are apps, and what’s a Polylith?</p>\n<h3 id=\"what%E2%80%99s-a-django-and-why-does-it-matter\">What’s a Django and why does it matter <a class=\"heading-anchor-permalink\" href=\"#what%E2%80%99s-a-django-and-why-does-it-matter\">#</a></h3>\n<p>Django’s a Python web framework (<a href=\"https://en.wikipedia.org/wiki/Web_framework\">https://en.wikipedia.org/wiki/Web_framework</a>), and while there are many frameworks in many languages (<a href=\"https://en.wikipedia.org/wiki/Web_framework#General-purpose_website_frameworks\">https://en.wikipedia.org/wiki/Web_framework#General-purpose_website_frameworks</a>) what makes Django unique is its concept of apps. Reusable apps within a single monolithic web application.</p>\n<h3 id=\"what-are-apps\">What are apps <a class=\"heading-anchor-permalink\" href=\"#what-are-apps\">#</a></h3>\n<p>It might not make sense at first but consider first that you might need reusable apps that you might want to install to your clients’ servers.\nOne example would be if you specialize in e-commerce and you’ve got clients that have</p>\n<ul>\n<li>an online catalog and</li>\n<li>they have kiosks in their physical stores where their customers can do some subset of operations with the catalog and</li>\n<li>they might also have sales/customer support staff which needs to use yet another user interface and</li>\n<li>they might need a special portal that their accounting department uses to work with financial data and</li>\n<li>they might need a special portal for their warehouse/distribution staff</li>\n<li>and so on and so forth</li>\n</ul>\n<p>How do you handle all that? Even if they need only one of these and not any others it’s useful to be able to simply plug another - similar or entirely different from the primary - application into the ecosystem.</p>\n<p>Django lets you do this with these apps. Even if it’s fundamentally one and the same “portal” you can leverage apps to make domain boundaries (domain as in domain driven design) or break each app into its own process/runtime and its own Django setup and what’ve you got? Microservices!</p>\n<h3 id=\"what%E2%80%99s-a-polylith\">What’s a polylith <a class=\"heading-anchor-permalink\" href=\"#what%E2%80%99s-a-polylith\">#</a></h3>\n<p>A polylith is monorepo containing the entirety of a project broken down into microservices, in a sane structure, allowing for both code reuse and clear distinction between deployable artifacts.\nThere is tooling for it (primarily CLI) where you instruct a tool to manage the system but everything can be done with symlinks and - if necessary - reification (copying the linked directory) and reset. I generally don’t use reification but when I do I use <code>git checkout</code> to reset a reified directory back into a symlink in order to reify it with updated content. The last point I just want to ensure we both understand it’s possible but it’s really just advanced usage and I wouldn’t think too much about it in the beginning.</p>\n<p>Read more here <a href=\"https://polylith.gitbook.io/polylith/\">https://polylith.gitbook.io/polylith/</a>.</p>\n<p>To quickly grok why polylith might work for you imagine for a second that same e-commerce software product you’re selling to customers which’ve got warehouse portsl, sales &amp; support portals, accountants, in-shop kiosks, online catalogs etc all dealing with the same data.</p>\n<p>Let’s say hypothetically each of these portals has a UI of some kind and it either talks to its own specialized API or is self contained in some way.</p>\n<p>With a polylith you’d have something like (# =&gt; these are my comments)</p>\n<pre><code>e-commerce/\n├── bases\n│   └── ecom\n│       ├── accounting\n│       │   └── app.py # =&gt; a multiplatform QT desktop application\n│       ├── kiosk\n│       │   ├── app.py # =&gt; API for kiosk mobile app\n│       │   └── src\n│       │       ├── app.jsx # =&gt; kiosk mobile app\n│       │       ├── components\n│       │       ├── hooks\n│       │       ├── index.jsx\n│       │       ├── pages\n│       │       ├── router.jsx\n│       │       ├── screens\n│       │       ├── services\n│       │       ├── store\n│       │       └── utils\n│       ├── sales\n│       │   ├── app.py # =&gt; API for sales SPA\n│       │   └── src\n│       │       ├── app.jsx # =&gt; complex sales SPA\n│       │       ├── components\n│       │       ├── features\n│       │       ├── hooks\n│       │       ├── index.jsx\n│       │       ├── pages\n│       │       ├── router.jsx\n│       │       ├── services\n│       │       ├── store\n│       │       └── utils\n│       ├── support\n│       │   ├── app.py # =&gt; a flask MPA for support staff\n│       ├── warehouse\n│       │   ├── app.py # =&gt; an API for warehouse mobile app\n│       │   └── src\n│       │       ├── app.jsx # =&gt; mobile app for warehouse staff\n│       │       ├── components\n│       │       ├── hooks\n│       │       ├── index.jsx\n│       │       ├── pages\n│       │       ├── router.jsx\n│       │       ├── screens\n│       │       ├── services\n│       │       ├── store\n│       │       └── utils\n│       └── webshop\n│           ├── app.py # =&gt; an API for the webshop\n│           └── src\n│               ├── app.jsx # =&gt; a rich full stack (SPA + SSR) webshop app\n│               ├── components\n│               ├── features\n│               ├── hooks\n│               ├── index.jsx\n│               ├── pages\n│               ├── router.jsx\n│               ├── services\n│               ├── store\n│               └── utils\n├── components\n│   ├── ecom\n│   │   ├── lib # =&gt; shared libraries, reusable throughout the system\n│   │   │   ├── fsutils.py\n│   │   │   ├── money.py\n│   │   │   └── webutils.py\n│   │   └── tool # =&gt; shared tooling, reusable throughout the system\n│   │       ├── addresses.py\n│   │       ├── analytics.py\n│   │       ├── csv_map.py\n│   │       └── email.py\n│   └── ops # =&gt; ...\n├── Makefile\n├── projects\n│   ├── accounting-linux # =&gt; deployable artifact (binary) for linux desktop\n│   │   ├── ecom\n│   │   │   ├── accounting -&gt; ../../../bases/ecom/accounting/\n│   │   │   ├── lib -&gt; ../../../components/ecom/lib\n│   │   │   └── tool -&gt; ../../../components/ecom/tool\n│   │   ├── main.py\n│   │   └── requirements.txt\n│   ├── accounting-osx # =&gt; deployable artifact (binary) for OSX desktop\n│   │   ├── ecom\n│   │   │   ├── accounting -&gt; ../../../bases/ecom/accounting/\n│   │   │   ├── lib -&gt; ../../../components/ecom/lib\n│   │   │   └── tool -&gt; ../../../components/ecom/tool\n│   │   ├── main.py\n│   │   └── requirements.txt\n│   ├── accounting-win # =&gt; deployable artifact (binary) for Windows desktop \n│   │   ├── ecom\n│   │   │   ├── accounting -&gt; ../../../bases/ecom/accounting/\n│   │   │   ├── lib -&gt; ../../../components/ecom/lib\n│   │   │   └── tool -&gt; ../../../components/ecom/tool\n│   │   ├── main.py\n│   │   └── requirements.txt\n│   ├── kiosk-api # =&gt; deployable (k8s/docker/etc) API server\n│   │   ├── ecom\n│   │   │   ├── kiosk -&gt; ../../../bases/ecom/kiosk/\n│   │   │   ├── lib -&gt; ../../../components/ecom/lib\n│   │   │   └── tool -&gt; ../../../components/ecom/tool\n│   │   ├── main.py\n│   │   └── requirements.txt\n│   ├── kiosk-mobile # =&gt; deployable (app store/apk/ipa) mobile app\n│   │   ├── ecom\n│   │   │   ├── kiosk -&gt; ../../../bases/ecom/kiosk/\n│   │   │   ├── lib -&gt; ../../../components/ecom/lib\n│   │   │   └── tool -&gt; ../../../components/ecom/tool\n│   │   ├── main.py\n│   │   └── requirements.txt\n│   ├── sales-api # =&gt; ...\n│   │   ├── ecom\n│   │   │   ├── lib -&gt; ../../../components/ecom/lib\n│   │   │   ├── sales -&gt; ../../../bases/ecom/sales/\n│   │   │   └── tool -&gt; ../../../components/ecom/tool\n│   │   ├── main.py\n│   │   └── requirements.txt\n│   ├── sales-app # =&gt; deployable SPA\n│   │   ├── ecom\n│   │   │   └── sales -&gt; ../../../bases/ecom/sales/\n│   │   ├── index.js\n│   │   └── package.json\n│   ├── support-app # =&gt; deployable (k8s/docker/etc) MPA server\n│   │   ├── ecom\n│   │   │   ├── lib -&gt; ../../../components/ecom/lib\n│   │   │   ├── support -&gt; ../../../bases/ecom/support/\n│   │   │   └── tool -&gt; ../../../components/ecom/tool\n│   │   ├── main.py\n│   │   └── requirements.txt\n│   ├── warehouse-api # =&gt; ...\n│   │   ├── ecom\n│   │   │   ├── lib -&gt; ../../../components/ecom/lib\n│   │   │   ├── tool -&gt; ../../../components/ecom/tool\n│   │   │   └── warehouse -&gt; ../../../bases/ecom/warehouse/\n│   │   ├── main.py\n│   │   └── requirements.txt\n│   ├── warehouse-mobile # =&gt; ...\n│   │   ├── ecom\n│   │   │   └── warehouse -&gt; ../../../bases/ecom/warehouse/\n│   │   ├── index.js\n│   │   └── package.json\n│   ├── webshop-api # =&gt; ...\n│   │   ├── ecom\n│   │   │   ├── lib -&gt; ../../../components/ecom/lib\n│   │   │   ├── tool -&gt; ../../../components/ecom/tool\n│   │   │   └── webshop -&gt; ../../../bases/ecom/webshop\n│   │   ├── main.py\n│   │   └── requirements.txt\n│   └── webshop-app # =&gt; deployable full stack app\n│       ├── ecom\n│       │   └── webshop -&gt; ../../../bases/ecom/webshop\n│       ├── index.js\n│       └── package.json\n└── README.md\n</code></pre>\n<p>Just imagine trying to write code for an ecosystem of this complexity. Then try and imagine how much time and effort and &gt;&gt;cognitive load&lt;&lt; it would take to handle its SDLC.</p>\n<p>Polylith puts it all into a single monorepo but helps you with clear separation of what belongs where and why.</p>\n<p>Massive props to Joakim Tengstrand, Furkan Bayaraktar, and James Trunk for essentially inventing and creating Polylith as a concept (<a href=\"https://polylith.gitbook.io/polylith/conclusion/who-made-polylith\">https://polylith.gitbook.io/polylith/conclusion/who-made-polylith</a>) and of course props to David Vujic for Python tooling (and many many helpful blogs! <a href=\"https://davidvujic.blogspot.com/\">https://davidvujic.blogspot.com/</a>) for Polylith <a href=\"https://davidvujic.github.io/python-polylith-docs/\">https://davidvujic.github.io/python-polylith-docs/</a></p>\n<p>So…</p>\n<p>back to architecture conundrum - how to fit Django apps into a Polylith?</p>\n<h2 id=\"solution\">Solution <a class=\"heading-anchor-permalink\" href=\"#solution\">#</a></h2>\n<iframe src=\"https://microads.ftp.sh/api/ads/delivery-node/random?nonce=abc123\"></iframe>\n<p>So, two problems with Django apps, and they both stem from how Django is supposed to be set up.</p>\n<p>Usually you would either install django globally or</p>\n<ol>\n<li>init the root project</li>\n<li>add django itself as a dependency (either via a package manager or by making a venv and doing <code>.venv/bin/pip3 install django</code>)</li>\n<li>once django is installed you can now do <code>./venv/bin/django-admin</code> to <code>startproject</code> (this makes the Django base setup)</li>\n<li>use <code>startapp</code> to create additional apps for the project, all sitting alongsite the Django base</li>\n</ol>\n<p>and it would look like</p>\n<pre><code>Script started on 2025-09-02 22:38:40+02:00 [TERM=&quot;xterm-256color&quot; TTY=&quot;/dev/pts/6&quot; COLUMNS=&quot;80&quot; LINES=&quot;24&quot;]\nuser1@machine1:~$ cd /tmp\nuser1@machine1:/tmp$ mkdir mysystem &amp;&amp; cd mysystem\nuser1@machine1:/tmp/mysystem$ pyenv local 3.13\nuser1@machine1:/tmp/mysystem$ python3 --version\nPython 3.13.5\nuser1@machine1:/tmp/mysystem$ python3 -m venv .venv\n.venv/binuser1@machine1:/tmp/mysystem$ .venv/bin/pip3 install django==5.2.5\nCollecting django==5.2.5\n  Downloading django-5.2.5-py3-none-any.whl.metadata (4.1 kB)\nCollecting asgiref&gt;=3.8.1 (from django==5.2.5)\n  Downloading asgiref-3.9.1-py3-none-any.whl.metadata (9.3 kB)\nCollecting sqlparse&gt;=0.3.1 (from django==5.2.5)\n  Downloading sqlparse-0.5.3-py3-none-any.whl.metadata (3.9 kB)\nDownloading django-5.2.5-py3-none-any.whl (8.3 MB)\n   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 8.3/8.3 MB 21.0 MB/s eta 0:00:00\n.Downloading asgiref-3.9.1-py3-none-any.whl (23 kB)\nDownloading sqlparse-0.5.3-py3-none-any.whl (44 kB)\nInstalling collected packages: sqlparse, asgiref, django\nSuccessfully installed asgiref-3.9.1 django-5.2.5 sqlparse-0.5.3\n\n[notice] A new release of pip is available: 25.1.1 -&gt; 25.2\n[notice] To update, run: /tmp/mysystem/.venv/bin/python3 -m pip install --upgrade pip\nuser1@machine1:/tmp/mysystem$ .venv/bin/pip3 freeze &gt; requirements.txt\nuser1@machine1:/tmp/mysystem$ .venv/bin/django-admin startproject core .\nuser1@machine1:/tmp/mysystem$ ls\ncore  manage.py  requirements.txt\nuser1@machine1:/tmp/mysystem$ .venv/bin/python3 manage.py startapp firstapp\nuser1@machine1:/tmp/mysystem$ ls\ncore  firstapp  manage.py  requirements.txt\nuser1@machine1:/tmp/mysystem$ .venv/bin/python3 manage.py startapp secondapp\nuser1@machine1:/tmp/mysystem$ ls\ncore  firstapp  manage.py  requirements.txt  secondapp\nuser1@machine1:/tmp/mysystem$ .venv/bin/python3 manage.py runserver\nWatching for file changes with StatReloader\nPerforming system checks...\n\nSystem check identified no issues (0 silenced).\n\nYou have 18 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): admin, auth, contenttypes, sessions.\nRun 'python manage.py migrate' to apply them.\nSeptember 02, 2025 - 20:57:43\nDjango version 5.2.5, using settings 'core.settings'\nStarting development server at http://127.0.0.1:8000/\nQuit the server with CONTROL-C.\n\nWARNING: This is a development server. Do not use it in a production setting. Use a production WSGI or ASGI server instead.\nFor more information on production servers see: https://docs.djangoproject.com/en/5.2/howto/deployment/\n[02/Sep/2025 20:57:47] &quot;GET / HTTP/1.1&quot; 200 12068\nNot Found: /favicon.ico\n[02/Sep/2025 20:57:47] &quot;GET /favicon.ico HTTP/1.1&quot; 404 2206\n^Cuser1@machine1:/tmp/mysystem$ exit\nexit\n\nScript done on 2025-09-02 22:57:52+02:00 [COMMAND_EXIT_CODE=&quot;0&quot;]\n</code></pre>\n<p>So what you end up with is a django core and one (or many) django apps at the same level, and this way you can configure the apps in the core (this is required of course). Any deviation from this pattern will cause a lot of pain in terms of import paths and namings/configurations.</p>\n<p>To translate this into a polylith, because of course we won’t be cramming everything into a single <code>base</code>, we have two options</p>\n<ul>\n<li>make a new base for each django app (which can make sense in some situations) or</li>\n<li>make a new component for each django app (which I went with for my project)</li>\n</ul>\n<p>and the second IMHO makes much more sense. Not only are django apps reusable so they fit as a component but different combinations of apps can be used by multiple different Django artifacts (an admin UI is one simple example).</p>\n<p>This way you can mix and match django apps together with multiple different django systems. Here’s an example of a personal project of mine where a django system with <code>primaryapp</code> brings in multiple other apps as components:</p>\n<pre><code>.\n├── bases\n│   └── myproject\n│       ├── ...\n│       └── webapp\n│           ├── asgi.py\n│           ├── __init__.py\n│           ├── settings.py\n│           ├── urls.py\n│           └── wsgi.py\n│...\n├── components\n│   ├── djangoapps\n│   │   ├── sideapp1\n│   │   │   ├── admin.py\n│   │   │   ├── apps.py\n│   │   │   ├── __init__.py\n│   │   │   ├── migrations\n│   │   │   │   └── __init__.py\n│   │   │   ├── models.py\n│   │   │   ├── tests.py\n│   │   │   └── views.py\n│   │   ├── sideapp2\n│   │   │   ├── admin.py\n│   │   │   ├── apps.py\n│   │   │   ├── __init__.py\n│   │   │   ├── migrations\n│   │   │   │   └── __init__.py\n│   │   │   ├── models.py\n│   │   │   ├── __pycache__\n│   │   │   ├── tests.py\n│   │   │   └── views.py\n│   │   ├── sideapp3\n│   │   │   ├── admin.py\n│   │   │   ├── apps.py\n│   │   │   ├── __init__.py\n│   │   │   ├── migrations\n│   │   │   │   └── __init__.py\n│   │   │   ├── models.py\n│   │   │   ├── tests.py\n│   │   │   └── views.py\n│   │   ├── sideapp4\n│   │   │   ├── admin.py\n│   │   │   ├── apps.py\n│   │   │   ├── __init__.py\n│   │   │   ├── migrations\n│   │   │   │   └── __init__.py\n│   │   │   ├── models.py\n│   │   │   ├── tests.py\n│   │   │   └── views.py\n│   │   └── primaryapp\n│   │       ├── admin.py\n│   │       ├── apps.py\n│   │       ├── components.py\n│   │       ├── __init__.py\n│   │       ├── migrations\n│   │       │   └── __init__.py\n│   │       ├── models.py\n│   │       ├── tests.py\n│   │       ├── urls.py\n│   │       └── views.py\n│   └── myproject\n│...\n└── projects\n    ├── ...\n    ├── myproject-webapp\n    │   ├── ...\n    │   ├── Makefile\n    │   ├── README.md\n    │   ├── requirements.txt\n    │   └── myproject\n    │       ├── sideapp1 -&gt; ../../../components/djangoapps/sideapp1\n    │       ├── manage.py\n    │       ├── sideapp2 -&gt; ../../../components/djangoapps/sideapp2\n    │       ├── sideapp3 -&gt; ../../../components/djangoapps/sideapp3\n    │       ├── sideapp4 -&gt; ../../../components/djangoapps/sideapp4\n    │       ├── primaryapp -&gt; ../../../components/djangoapps/primaryapp\n    │       └── webapp -&gt; ../../../bases/myproject/webapp\n    └── ...\n        └── ...\n</code></pre>\n<p>If you have questions or suggestions shoot me an e-mail, at <a href=\"mailto:apocpublic@outlook.com\">apocpublic@outlook.com</a>.</p>\n",
      "id": 3
    },
    {
      "path": "mongodb-mass-removing-nested-array-element-property.md",
      "url": "mongodb-mass-removing-nested-array-element-property.html",
      "content": "# Mass removing a property from an object that's an element in an array property\n\nNoting this case because finding a solution or docs on it is not easy and the functionality is not discoverable. I myself forgot about it and had to re-find it a couple of times.\n\nScenario is when a document has a `.things` property that's an array of objects, and one of the properties (e.g. `.things[].stuff` has to be mass removed.\nUnsetting the nested property by doing an `updateOne(lookup, {$unset: {\"things.stuff\": 1}})` or `$unset: {\"things.$.stuff\": 1}` does not work.\n\n### Solution\n\n<iframe src=\"https://microads.ftp.sh/api/ads/delivery-node/random?nonce=abc123\"></iframe>\n\nAs seen here https://www.mongodb.com/docs/manual/reference/operator/update/positional-all/\n\nThe \"all positional operator\", `$[]` indicates that the update operator should modify all elements in the specified array field.\nDoing `updateOne(lookup, {$unset: {\"things.$[].stuff\": 1}})` will successfully clean out the property from objects in the document's `.things` array.\n",
      "html": "<h1 id=\"mass-removing-a-property-from-an-object-that%E2%80%99s-an-element-in-an-array-property\">Mass removing a property from an object that’s an element in an array property <a class=\"heading-anchor-permalink\" href=\"#mass-removing-a-property-from-an-object-that%E2%80%99s-an-element-in-an-array-property\">#</a></h1>\n<p>Noting this case because finding a solution or docs on it is not easy and the functionality is not discoverable. I myself forgot about it and had to re-find it a couple of times.</p>\n<p>Scenario is when a document has a <code>.things</code> property that’s an array of objects, and one of the properties (e.g. <code>.things[].stuff</code> has to be mass removed.\nUnsetting the nested property by doing an <code>updateOne(lookup, {$unset: {&quot;things.stuff&quot;: 1}})</code> or <code>$unset: {&quot;things.$.stuff&quot;: 1}</code> does not work.</p>\n<h3 id=\"solution\">Solution <a class=\"heading-anchor-permalink\" href=\"#solution\">#</a></h3>\n<iframe src=\"https://microads.ftp.sh/api/ads/delivery-node/random?nonce=abc123\"></iframe>\n<p>As seen here <a href=\"https://www.mongodb.com/docs/manual/reference/operator/update/positional-all/\">https://www.mongodb.com/docs/manual/reference/operator/update/positional-all/</a></p>\n<p>The “all positional operator”, <code>$[]</code> indicates that the update operator should modify all elements in the specified array field.\nDoing <code>updateOne(lookup, {$unset: {&quot;things.$[].stuff&quot;: 1}})</code> will successfully clean out the property from objects in the document’s <code>.things</code> array.</p>\n",
      "id": 4
    },
    {
      "path": "needlestack.md",
      "url": "needlestack.html",
      "content": "Here I put links to all the amazing things I've read.\n\n## Contents\n\n- Programming\n  - Ruby\n\n## Programming\n\nAll about programming.\n\n### Python\n\n- https://blog.glyph.im/2025/04/stop-writing-init-methods.html an article about the by far cleanest method to do Python OOP I've seen so far\n\n### Ruby\n\n- https://morningcoffee.io/interfaces-in-ruby.html excellent article about using unit tests to enforce expected behaviors instead of interfaces-as-a-language-feature (think Java interfaces etc)\n",
      "html": "<p>Here I put links to all the amazing things I’ve read.</p>\n<h2 id=\"contents\">Contents <a class=\"heading-anchor-permalink\" href=\"#contents\">#</a></h2>\n<ul>\n<li>Programming\n<ul>\n<li>Ruby</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"programming\">Programming <a class=\"heading-anchor-permalink\" href=\"#programming\">#</a></h2>\n<p>All about programming.</p>\n<h3 id=\"python\">Python <a class=\"heading-anchor-permalink\" href=\"#python\">#</a></h3>\n<ul>\n<li><a href=\"https://blog.glyph.im/2025/04/stop-writing-init-methods.html\">https://blog.glyph.im/2025/04/stop-writing-init-methods.html</a> an article about the by far cleanest method to do Python OOP I’ve seen so far</li>\n</ul>\n<h3 id=\"ruby\">Ruby <a class=\"heading-anchor-permalink\" href=\"#ruby\">#</a></h3>\n<ul>\n<li><a href=\"https://morningcoffee.io/interfaces-in-ruby.html\">https://morningcoffee.io/interfaces-in-ruby.html</a> excellent article about using unit tests to enforce expected behaviors instead of interfaces-as-a-language-feature (think Java interfaces etc)</li>\n</ul>\n",
      "id": 5
    },
    {
      "path": "python-pydantic-unprintable-validationerror-object.md",
      "url": "python-pydantic-unprintable-validationerror-object.html",
      "content": "# Pydantic ValidationError with unprintable ValidationError object\n\nIn some cases (NOT always), using Pydantic in a Python project will fail with an \"unprintable\" validation error, resulting in stack breaking with an exception similar to\n\n```\npydantic.error_wrappers.ValidationError: <unprintable ValidationError object>\n```\n\nand while I couldn't find the time to exactly find what causes this and how to handle it elegantly;\n\n### Solution\n\n<iframe src=\"https://microads.ftp.sh/api/ads/delivery-node/random?nonce=abc123\"></iframe>\n\na quick solution that I found is to try to instantiate some or any of the Pydantic types as early as possible.\nIn other words, this problem arises when\n\n```python\nfrom pydantic import BaseModel\n\nclass B(BaseModel):\n    some_property: int\n\nclass A(BaseModel):\n    b: B\n\ndef example() -> A:\n    b = {\"another_property\": None}\n    return A(**{\"b\": b}) # => raises an \"unprintable\" ValidationError with no extra info\n```\n\nmeaning that validating inner types earlier like so\n\n```python\n\ndef example() -> A:\n    b = {\"another_property\": None}\n    B(**b) # => raises a \"printable\" ValidationError, b.some_property # Field required [type=missing, input_value={'another_property': None}, input_type=dict]\n\n    return A(**{\"b\": b})\n```\n\nis a sensible approach to avoiding this type of issue.\n",
      "html": "<h1 id=\"pydantic-validationerror-with-unprintable-validationerror-object\">Pydantic ValidationError with unprintable ValidationError object <a class=\"heading-anchor-permalink\" href=\"#pydantic-validationerror-with-unprintable-validationerror-object\">#</a></h1>\n<p>In some cases (NOT always), using Pydantic in a Python project will fail with an “unprintable” validation error, resulting in stack breaking with an exception similar to</p>\n<pre><code>pydantic.error_wrappers.ValidationError: &lt;unprintable ValidationError object&gt;\n</code></pre>\n<p>and while I couldn’t find the time to exactly find what causes this and how to handle it elegantly;</p>\n<h3 id=\"solution\">Solution <a class=\"heading-anchor-permalink\" href=\"#solution\">#</a></h3>\n<iframe src=\"https://microads.ftp.sh/api/ads/delivery-node/random?nonce=abc123\"></iframe>\n<p>a quick solution that I found is to try to instantiate some or any of the Pydantic types as early as possible.\nIn other words, this problem arises when</p>\n<pre><code class=\"language-python\">from pydantic import BaseModel\n\nclass B(BaseModel):\n    some_property: int\n\nclass A(BaseModel):\n    b: B\n\ndef example() -&gt; A:\n    b = {&quot;another_property&quot;: None}\n    return A(**{&quot;b&quot;: b}) # =&gt; raises an &quot;unprintable&quot; ValidationError with no extra info\n</code></pre>\n<p>meaning that validating inner types earlier like so</p>\n<pre><code class=\"language-python\">\ndef example() -&gt; A:\n    b = {&quot;another_property&quot;: None}\n    B(**b) # =&gt; raises a &quot;printable&quot; ValidationError, b.some_property # Field required [type=missing, input_value={'another_property': None}, input_type=dict]\n\n    return A(**{&quot;b&quot;: b})\n</code></pre>\n<p>is a sensible approach to avoiding this type of issue.</p>\n",
      "id": 6
    },
    {
      "path": "routing-pattern-for-html6-htmx-applications.md",
      "url": "routing-pattern-for-html6-htmx-applications.html",
      "content": "# routing pattern for HTML6 (HTMX) applications\n\nGonna keep this one short - I think I've discovered the ideal pattern to URL routing for an HTML6 (HTMX) application.\n\nFirst time I used HTMX was for a hobby project that I myself regularly use, and I'd sprinkle a bit of dynamic loading here and there.\nInitially is was just an MPA where some hierarchical data structure is dictated by the URL currently open.\nThe dynamic behavior was all done with buttons in forms with some occasional JS ,and full page reloads happened on most events.\n\nThe application evolved a bit and HTMX requests went to dynamic functionality handled by endpoints like\n\n```\n/app/something/do-thing\n```\n\nwhich would perform some actions and respond with (usually) the same content and some additional contextual event information.\nNeedless to say over time more and more parts became serverside-rendered / HX-GET triggered by page load and have their own tiny ecosystem of functionalities and behaviors.\n\nThis is not that bad when you consider that SPA alternatives are the same with much much more code needed to make it happen.\n\n## Solution\n\n<iframe src=\"https://microads.ftp.sh/api/ads/delivery-node/random?nonce=abc123\"></iframe>\n\nFor those who have already read https://hypermedia.systems this will seem obvious right away but I didn't see it until I finished the book.\nIn a nutshell HTMX does what HTML is already supposed to be capable of, which is why people call it HTML6.\n\n### Asking and telling\n\nHypermedia is just information at a certain URI. You can talk to hypermedia, you can ask it \"how are you\"\n\n```\ncurl -x GET https://httpbin.org/get\n```\n\nand it will respond.\n\nYou can tell hypermedia something\n\n```\ncurl -x POST http://httpbin.org/post -d 'query=books'\n```\n\nand it will respond.\nThat's all there is to it (to \"tell\" you can use POST, PATCH, PUT, DELETE, et cetera).\n\nNow, how do you build a complex hypermedia application or a system with just these two concepts? Asking and telling?\n\n### Screens and parts\n\nThe approach I discovered works the best is one where you work top-down; start with the screen/page itself, let's say we're talking about a TODO app and it has\n\n#### Screens\n\n- a menu/navbar of some kind and\n- it's got a main \"tasks\" screen/page where it shows your tasks and lets you create a new one\n- it's got a \"settings\" screen/page where it lets you change your preferences, toggle dark/light theme and whatnot\n- it's got a \"timeline\" screen/page where you can see what happened when and so on\n\nso the routing would be like (let's say it's Flask but I don't have to say this translates to Laravel/Express/Spring or what have you)\n\n```python\n\n@app.route(\"/\", methods=[\"GET\"])\ndef tasks(...): ...\n\n@app.route(\"/<task_id>\", methods=[\"GET\"])\ndef show_task(task_id: int): ...\n\n# ... and parts for tasks follow\n# ...\n\n@app.route(\"/settings\", methods=[\"GET\"])\ndef settings(...): ...\n\n@app.route(\"/settings/<setting_name>\", methods=[\"GET\"])\ndef show_setting(setting_name: str): ...\n\n# ... and parts for settings follow\n# ...\n\n@app.route(\"/timeline\", methods=[\"GET\"])\ndef timeline(...): ...\n\n@app.route(\"/timeline/<moment>\", methods=[\"GET\"])\ndef timeline_moment(moment: int): ...\n\n# ... and parts for timeline follow\n# ...\n```\n\n#### Parts\n\nand for all hypermedia interactions you would create \"part\" routes like so:\n\n```python\n\n@app.route(\"/part/tasks\", methods=[\"GET\"])\ndef list_tasks_part(...): ...\n\n@app.route(\"/part/tasks/<task_id>\", methods=[\"GET\"])\ndef show_task_part(task_id: int): ...\n\n@app.route(\"/part/tasks\", methods=[\"POST\"])\ndef store_task_part(body: dict): ...\n\n@app.route(\"/part/tasks/<task_id>\", methods=[\"PATCH\"])\ndef toggle_task_part(task_id: int): ... # imagine tasks can be enabled/disabled and they have an hx-patch trigger\n```\n\nand a similar approach would be applied to settings and to the timeline.\n\n#### Reusable parts\nIf there's a common \"component\" (ie part) visible in all screens they would usually be defined as the first parts in the list of routes:\n\n```python\n\n@app.route(\"/part/settings/navmenu\", methods=[\"GET\"])\ndef menu_part(...): ... # this way you can also have specialized menus in certain screens\n...\n\n@app.route(\"/part/settings\", methods=[\"GET\"])\ndef list_settings_part(...): ...\n\n@app.route(\"/part/settings/<setting_name>\", methods=[\"GET\"])\ndef show_setting_part(setting_name: str): ...\n```\n\nthe obvious benefit is reusability - the fact that the `menu_part` endpoint can be pointed at many different routes\n\n- /part/tasks/navmenu\n- /part/settings/navmenu\n- /part/timeline/navmenu\n\nbut they don't have to be. Sure there is a bit of repetition but it's RESTful and *really* scalable IMHO.\n\n#### Specialized parts\nAny specialized parts or even static pages can be put between the reusable and CRUD routes, for example (because route order almost universally matters and if you want to avoid prefixing each route group):\n\n- reusable\n  - GET /part/tasks/navmenu\n  - GET /part/tasks/footer\n- specialized\n  - GET /part/tasks/about (static \"about\" page)\n  - GET /part/tasks/export (CSV export, for example, trigger could be rendered in `list_tasks_part` for example or in `show_task_part` to have a per-task export)\n- CRUD\n  - GET /part/tasks\n  - GET /part/tasks/<task_id>\n  - POST /part/tasks\n  - PUT /part/tasks/<task_id>\n  - DELETE /part/tasks/<task_id>\n  - PATCH /part/tasks/<task_id>/enabled\n  \n### All together\n\nYou end up with a very clear pattern to where things are:\n\n- screen\n  - GET /\n  - GET /<task_id>\n- reusable\n  - GET /part/tasks/navmenu\n  - GET /part/tasks/footer\n- specialized\n  - GET /part/tasks/about\n  - GET /part/tasks/export\n- CRUD\n  - GET /part/tasks\n  - GET /part/tasks/<task_id>\n  - POST /part/tasks\n  - PUT /part/tasks/<task_id>\n  - DELETE /part/tasks/<task_id>\n  - PATCH /part/tasks/<task_id>/enabled\n- screen\n  - GET /settings\n  - GET /settings/<setting_name>\n- reusable\n  - GET /part/settings/navmenu\n  - GET /part/settings/footer\n- specialized\n  - GET /part/settings/export\n- CRUD\n  - GET /part/settings\n  - GET /part/settings/<setting_name>\n  - PATCH /part/settings/<setting_name>/enabled\n  - PUT /part/settings/<setting_name>\n- screen\n  - GET /timeline\n  - GET /timeline/\\<moment>\n- reusable\n  - GET /part/timeline/navmenu\n  - GET /part/timeline/footer\n- specialized\n  - GET /part/timeline/export\n- CRUD\n  - GET /part/timeline\n  - GET /part/timeline/\\<moment>\n  \n",
      "html": "<h1 id=\"routing-pattern-for-html6-(htmx)-applications\">routing pattern for HTML6 (HTMX) applications <a class=\"heading-anchor-permalink\" href=\"#routing-pattern-for-html6-(htmx)-applications\">#</a></h1>\n<p>Gonna keep this one short - I think I’ve discovered the ideal pattern to URL routing for an HTML6 (HTMX) application.</p>\n<p>First time I used HTMX was for a hobby project that I myself regularly use, and I’d sprinkle a bit of dynamic loading here and there.\nInitially is was just an MPA where some hierarchical data structure is dictated by the URL currently open.\nThe dynamic behavior was all done with buttons in forms with some occasional JS ,and full page reloads happened on most events.</p>\n<p>The application evolved a bit and HTMX requests went to dynamic functionality handled by endpoints like</p>\n<pre><code>/app/something/do-thing\n</code></pre>\n<p>which would perform some actions and respond with (usually) the same content and some additional contextual event information.\nNeedless to say over time more and more parts became serverside-rendered / HX-GET triggered by page load and have their own tiny ecosystem of functionalities and behaviors.</p>\n<p>This is not that bad when you consider that SPA alternatives are the same with much much more code needed to make it happen.</p>\n<h2 id=\"solution\">Solution <a class=\"heading-anchor-permalink\" href=\"#solution\">#</a></h2>\n<iframe src=\"https://microads.ftp.sh/api/ads/delivery-node/random?nonce=abc123\"></iframe>\n<p>For those who have already read <a href=\"https://hypermedia.systems\">https://hypermedia.systems</a> this will seem obvious right away but I didn’t see it until I finished the book.\nIn a nutshell HTMX does what HTML is already supposed to be capable of, which is why people call it HTML6.</p>\n<h3 id=\"asking-and-telling\">Asking and telling <a class=\"heading-anchor-permalink\" href=\"#asking-and-telling\">#</a></h3>\n<p>Hypermedia is just information at a certain URI. You can talk to hypermedia, you can ask it “how are you”</p>\n<pre><code>curl -x GET https://httpbin.org/get\n</code></pre>\n<p>and it will respond.</p>\n<p>You can tell hypermedia something</p>\n<pre><code>curl -x POST http://httpbin.org/post -d 'query=books'\n</code></pre>\n<p>and it will respond.\nThat’s all there is to it (to “tell” you can use POST, PATCH, PUT, DELETE, et cetera).</p>\n<p>Now, how do you build a complex hypermedia application or a system with just these two concepts? Asking and telling?</p>\n<h3 id=\"screens-and-parts\">Screens and parts <a class=\"heading-anchor-permalink\" href=\"#screens-and-parts\">#</a></h3>\n<p>The approach I discovered works the best is one where you work top-down; start with the screen/page itself, let’s say we’re talking about a TODO app and it has</p>\n<h4 id=\"screens\">Screens <a class=\"heading-anchor-permalink\" href=\"#screens\">#</a></h4>\n<ul>\n<li>a menu/navbar of some kind and</li>\n<li>it’s got a main “tasks” screen/page where it shows your tasks and lets you create a new one</li>\n<li>it’s got a “settings” screen/page where it lets you change your preferences, toggle dark/light theme and whatnot</li>\n<li>it’s got a “timeline” screen/page where you can see what happened when and so on</li>\n</ul>\n<p>so the routing would be like (let’s say it’s Flask but I don’t have to say this translates to Laravel/Express/Spring or what have you)</p>\n<pre><code class=\"language-python\">\n@app.route(&quot;/&quot;, methods=[&quot;GET&quot;])\ndef tasks(...): ...\n\n@app.route(&quot;/&lt;task_id&gt;&quot;, methods=[&quot;GET&quot;])\ndef show_task(task_id: int): ...\n\n# ... and parts for tasks follow\n# ...\n\n@app.route(&quot;/settings&quot;, methods=[&quot;GET&quot;])\ndef settings(...): ...\n\n@app.route(&quot;/settings/&lt;setting_name&gt;&quot;, methods=[&quot;GET&quot;])\ndef show_setting(setting_name: str): ...\n\n# ... and parts for settings follow\n# ...\n\n@app.route(&quot;/timeline&quot;, methods=[&quot;GET&quot;])\ndef timeline(...): ...\n\n@app.route(&quot;/timeline/&lt;moment&gt;&quot;, methods=[&quot;GET&quot;])\ndef timeline_moment(moment: int): ...\n\n# ... and parts for timeline follow\n# ...\n</code></pre>\n<h4 id=\"parts\">Parts <a class=\"heading-anchor-permalink\" href=\"#parts\">#</a></h4>\n<p>and for all hypermedia interactions you would create “part” routes like so:</p>\n<pre><code class=\"language-python\">\n@app.route(&quot;/part/tasks&quot;, methods=[&quot;GET&quot;])\ndef list_tasks_part(...): ...\n\n@app.route(&quot;/part/tasks/&lt;task_id&gt;&quot;, methods=[&quot;GET&quot;])\ndef show_task_part(task_id: int): ...\n\n@app.route(&quot;/part/tasks&quot;, methods=[&quot;POST&quot;])\ndef store_task_part(body: dict): ...\n\n@app.route(&quot;/part/tasks/&lt;task_id&gt;&quot;, methods=[&quot;PATCH&quot;])\ndef toggle_task_part(task_id: int): ... # imagine tasks can be enabled/disabled and they have an hx-patch trigger\n</code></pre>\n<p>and a similar approach would be applied to settings and to the timeline.</p>\n<h4 id=\"reusable-parts\">Reusable parts <a class=\"heading-anchor-permalink\" href=\"#reusable-parts\">#</a></h4>\n<p>If there’s a common “component” (ie part) visible in all screens they would usually be defined as the first parts in the list of routes:</p>\n<pre><code class=\"language-python\">\n@app.route(&quot;/part/settings/navmenu&quot;, methods=[&quot;GET&quot;])\ndef menu_part(...): ... # this way you can also have specialized menus in certain screens\n...\n\n@app.route(&quot;/part/settings&quot;, methods=[&quot;GET&quot;])\ndef list_settings_part(...): ...\n\n@app.route(&quot;/part/settings/&lt;setting_name&gt;&quot;, methods=[&quot;GET&quot;])\ndef show_setting_part(setting_name: str): ...\n</code></pre>\n<p>the obvious benefit is reusability - the fact that the <code>menu_part</code> endpoint can be pointed at many different routes</p>\n<ul>\n<li>/part/tasks/navmenu</li>\n<li>/part/settings/navmenu</li>\n<li>/part/timeline/navmenu</li>\n</ul>\n<p>but they don’t have to be. Sure there is a bit of repetition but it’s RESTful and <em>really</em> scalable IMHO.</p>\n<h4 id=\"specialized-parts\">Specialized parts <a class=\"heading-anchor-permalink\" href=\"#specialized-parts\">#</a></h4>\n<p>Any specialized parts or even static pages can be put between the reusable and CRUD routes, for example (because route order almost universally matters and if you want to avoid prefixing each route group):</p>\n<ul>\n<li>reusable\n<ul>\n<li>GET /part/tasks/navmenu</li>\n<li>GET /part/tasks/footer</li>\n</ul>\n</li>\n<li>specialized\n<ul>\n<li>GET /part/tasks/about (static “about” page)</li>\n<li>GET /part/tasks/export (CSV export, for example, trigger could be rendered in <code>list_tasks_part</code> for example or in <code>show_task_part</code> to have a per-task export)</li>\n</ul>\n</li>\n<li>CRUD\n<ul>\n<li>GET /part/tasks</li>\n<li>GET /part/tasks/&lt;task_id&gt;</li>\n<li>POST /part/tasks</li>\n<li>PUT /part/tasks/&lt;task_id&gt;</li>\n<li>DELETE /part/tasks/&lt;task_id&gt;</li>\n<li>PATCH /part/tasks/&lt;task_id&gt;/enabled</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"all-together\">All together <a class=\"heading-anchor-permalink\" href=\"#all-together\">#</a></h3>\n<p>You end up with a very clear pattern to where things are:</p>\n<ul>\n<li>screen\n<ul>\n<li>GET /</li>\n<li>GET /&lt;task_id&gt;</li>\n</ul>\n</li>\n<li>reusable\n<ul>\n<li>GET /part/tasks/navmenu</li>\n<li>GET /part/tasks/footer</li>\n</ul>\n</li>\n<li>specialized\n<ul>\n<li>GET /part/tasks/about</li>\n<li>GET /part/tasks/export</li>\n</ul>\n</li>\n<li>CRUD\n<ul>\n<li>GET /part/tasks</li>\n<li>GET /part/tasks/&lt;task_id&gt;</li>\n<li>POST /part/tasks</li>\n<li>PUT /part/tasks/&lt;task_id&gt;</li>\n<li>DELETE /part/tasks/&lt;task_id&gt;</li>\n<li>PATCH /part/tasks/&lt;task_id&gt;/enabled</li>\n</ul>\n</li>\n<li>screen\n<ul>\n<li>GET /settings</li>\n<li>GET /settings/&lt;setting_name&gt;</li>\n</ul>\n</li>\n<li>reusable\n<ul>\n<li>GET /part/settings/navmenu</li>\n<li>GET /part/settings/footer</li>\n</ul>\n</li>\n<li>specialized\n<ul>\n<li>GET /part/settings/export</li>\n</ul>\n</li>\n<li>CRUD\n<ul>\n<li>GET /part/settings</li>\n<li>GET /part/settings/&lt;setting_name&gt;</li>\n<li>PATCH /part/settings/&lt;setting_name&gt;/enabled</li>\n<li>PUT /part/settings/&lt;setting_name&gt;</li>\n</ul>\n</li>\n<li>screen\n<ul>\n<li>GET /timeline</li>\n<li>GET /timeline/&lt;moment&gt;</li>\n</ul>\n</li>\n<li>reusable\n<ul>\n<li>GET /part/timeline/navmenu</li>\n<li>GET /part/timeline/footer</li>\n</ul>\n</li>\n<li>specialized\n<ul>\n<li>GET /part/timeline/export</li>\n</ul>\n</li>\n<li>CRUD\n<ul>\n<li>GET /part/timeline</li>\n<li>GET /part/timeline/&lt;moment&gt;</li>\n</ul>\n</li>\n</ul>\n",
      "id": 7
    },
    {
      "path": "solana-mental-model.md",
      "url": "solana-mental-model.html",
      "content": "# Solana mental model\n\nThis post, like most others, is primarily a note to self so I don't forget again.\n\nSee I'm doing a hobby project which interacts with Solana and it's sizeable enough for a single developer to work on one part of it for quite a while before moving to another part. Recently I finished some things and came back to the parts of the project which talk to Solana...\n\nSolana information landscape is, well, good enough. Like anything else it will take some time to get acquainted with how Solana behaves and how you should behave when interfacing with it. If you're used to this - to you - it doesn't seem like a big deal.\n\nHOWEVER the developer documentation and all the surrounding information like guides and tutorials didn't really help me rediscover all the concepts I'd already learned and understood like half a year ago.\n\n> Note: Keep in mind it might be just that my capacity is limited, or perhaps I didn't really understand the concepts and I just got it to work good enough™\n\n## Solana is instructions and instructions are interfaces\n<iframe src=\"https://microads.ftp.sh/api/ads/delivery-node/random?nonce=abc123\"></iframe>\n\nIt's just bags of interfaces, and more nuanced concepts/abstractions are just shortcuts to groups of these interfaces;\n\n1. you could call them functions if you want to draw a parallel with a library of some kind or with an ABI\n2. you could call them statements if you want to draw a parallel to SQL\n3. you could call them endpoints if you want to draw a parallel with an http API\n\nand in a way the parallels will work.\n\nSome of these sometimes also provide some kind of support for putting a group of interfacings (noun, plural) together - be it function calls (pt 1), statements (pt 2), or endpoints(pt 3)* - into a single \"transaction\" to be executed (and rolled back on failure).\n\nSame with Solana interfacings (instructions).\n\nInterfacings/instructions to handle tokens are provided by the SPL Token program, for example, and executing a series of transactions with instructions to tell the chain that some token exists and some wallet has control of it is how tokens are create.\n\nBut you can write your own also. More on this later.",
      "html": "<h1 id=\"solana-mental-model\">Solana mental model <a class=\"heading-anchor-permalink\" href=\"#solana-mental-model\">#</a></h1>\n<p>This post, like most others, is primarily a note to self so I don’t forget again.</p>\n<p>See I’m doing a hobby project which interacts with Solana and it’s sizeable enough for a single developer to work on one part of it for quite a while before moving to another part. Recently I finished some things and came back to the parts of the project which talk to Solana…</p>\n<p>Solana information landscape is, well, good enough. Like anything else it will take some time to get acquainted with how Solana behaves and how you should behave when interfacing with it. If you’re used to this - to you - it doesn’t seem like a big deal.</p>\n<p>HOWEVER the developer documentation and all the surrounding information like guides and tutorials didn’t really help me rediscover all the concepts I’d already learned and understood like half a year ago.</p>\n<blockquote>\n<p>Note: Keep in mind it might be just that my capacity is limited, or perhaps I didn’t really understand the concepts and I just got it to work good enough™</p>\n</blockquote>\n<h2 id=\"solana-is-instructions-and-instructions-are-interfaces\">Solana is instructions and instructions are interfaces <a class=\"heading-anchor-permalink\" href=\"#solana-is-instructions-and-instructions-are-interfaces\">#</a></h2>\n<iframe src=\"https://microads.ftp.sh/api/ads/delivery-node/random?nonce=abc123\"></iframe>\n<p>It’s just bags of interfaces, and more nuanced concepts/abstractions are just shortcuts to groups of these interfaces;</p>\n<ol>\n<li>you could call them functions if you want to draw a parallel with a library of some kind or with an ABI</li>\n<li>you could call them statements if you want to draw a parallel to SQL</li>\n<li>you could call them endpoints if you want to draw a parallel with an http API</li>\n</ol>\n<p>and in a way the parallels will work.</p>\n<p>Some of these sometimes also provide some kind of support for putting a group of interfacings (noun, plural) together - be it function calls (pt 1), statements (pt 2), or endpoints(pt 3)* - into a single “transaction” to be executed (and rolled back on failure).</p>\n<p>Same with Solana interfacings (instructions).</p>\n<p>Interfacings/instructions to handle tokens are provided by the SPL Token program, for example, and executing a series of transactions with instructions to tell the chain that some token exists and some wallet has control of it is how tokens are create.</p>\n<p>But you can write your own also. More on this later.</p>\n",
      "id": 8
    },
    {
      "path": "xfce4-slock-red-screen.md",
      "url": "xfce4-slock-red-screen.html",
      "content": "# XFCE4 red screen screen lock with slock\n\nXFCE4 uses slock as a default screen locker (in scenarios when a screensaver is disabled I think) and slock has this problem where it will show a blank red (sometimes blue?) screen which you cannot bypass.\nA workaround for me personally was to keep connecting to other TTYs on the same machine (laptop), authenticate there then `killall slock`.\n\nAs an additional consequence despite having \"Lock screen when system is going to sleep\" option toggled ON in XFCE power manager this slock issue would not resume to an auth wall but go back to the session, ultimately defeating the purpose of having a lock screen.\n\n### Solution\n\n<iframe src=\"https://microads.ftp.sh/api/ads/delivery-node/random?nonce=abc123\"></iframe>\n\nUsually setting a screensaver or basically anything to prevent slock from running is the least painful option.\nYou can for example install a lock \"ABCXYZlock\" and run\n\n```bash\nxfconf-query -c xfce4-session -p /general/LockCommand -s \"ABCXYZlock\"\n```\n\nwhich will *immediately* switch to using your preferred lock mechanism instead of slock.",
      "html": "<h1 id=\"xfce4-red-screen-screen-lock-with-slock\">XFCE4 red screen screen lock with slock <a class=\"heading-anchor-permalink\" href=\"#xfce4-red-screen-screen-lock-with-slock\">#</a></h1>\n<p>XFCE4 uses slock as a default screen locker (in scenarios when a screensaver is disabled I think) and slock has this problem where it will show a blank red (sometimes blue?) screen which you cannot bypass.\nA workaround for me personally was to keep connecting to other TTYs on the same machine (laptop), authenticate there then <code>killall slock</code>.</p>\n<p>As an additional consequence despite having “Lock screen when system is going to sleep” option toggled ON in XFCE power manager this slock issue would not resume to an auth wall but go back to the session, ultimately defeating the purpose of having a lock screen.</p>\n<h3 id=\"solution\">Solution <a class=\"heading-anchor-permalink\" href=\"#solution\">#</a></h3>\n<iframe src=\"https://microads.ftp.sh/api/ads/delivery-node/random?nonce=abc123\"></iframe>\n<p>Usually setting a screensaver or basically anything to prevent slock from running is the least painful option.\nYou can for example install a lock “ABCXYZlock” and run</p>\n<pre><code class=\"language-bash\">xfconf-query -c xfce4-session -p /general/LockCommand -s &quot;ABCXYZlock&quot;\n</code></pre>\n<p>which will <em>immediately</em> switch to using your preferred lock mechanism instead of slock.</p>\n",
      "id": 9
    },
    {
      "path": "xinput-synaptics-disable-while-typing.md",
      "url": "xinput-synaptics-disable-while-typing.html",
      "content": "# Touchpad stops working when a key is pressed/held\n\nI've seen this happen on various machines and various Linux distros and I keep forgetting the exact way to control the behavior, so a blog post is due.\n\nEssentially on an Xorg setup the default behavior for touchpads is to stop pointer activity as soon as a keyboard button is pressed or held.\n\nIf for example you wanted to relax a bit and play an Openarena match, you will quickly discover that when you use WASD to move in-game, the touchpad gets \"locked\" and you cannot look around ... until you stop moving.\n\n## Solution\n\n<iframe src=\"https://microads.ftp.sh/api/ads/delivery-node/random?nonce=abc123\"></iframe>\n\nInput devices on an Xorg machine are handled by the `xinput` utility. You can configure these devices to a usually very high detail, but you need to know how.\n\nTo start with, you've got to find your device. Run\n\n```\nxinput list\n```\n\n(or just `xinput`)\n\nand you will get back a detailed listing of input devices. Each will have its ID listed like so\n\n```\n...\n⎜   ↳ SynPS/2 Synaptics TouchPad              \tid=12\t[slave  pointer  (2)]\n...\n```\n\n(in this example it's id=12). Find your device in the list and remember that ID.\n\nTo see what properties can be configured for this device, run\n\n```\nxinput list-props 12\n```\n\namong which you can find, for example, something like\n\n```\nlibinput Disable While Typing Enabled (355):\t1\n```\n\nwhere the 355 represents the ID of that one specific setting, and the 1 represents what it is set to at the moment (1 meaning true since this setting is boolean).\n\nTo disable it, I run\n\n```\nxinput set-prop 12 355 0\n```\n\nand to confirm the settings has been applied I can do\n\n```\nxinput list-props 12\n```\n\nagain.\n\nThat's it. Feel free to explore various settings and look them up and BE CAREFUL not to change things you don't understand.",
      "html": "<h1 id=\"touchpad-stops-working-when-a-key-is-pressed%2Fheld\">Touchpad stops working when a key is pressed/held <a class=\"heading-anchor-permalink\" href=\"#touchpad-stops-working-when-a-key-is-pressed%2Fheld\">#</a></h1>\n<p>I’ve seen this happen on various machines and various Linux distros and I keep forgetting the exact way to control the behavior, so a blog post is due.</p>\n<p>Essentially on an Xorg setup the default behavior for touchpads is to stop pointer activity as soon as a keyboard button is pressed or held.</p>\n<p>If for example you wanted to relax a bit and play an Openarena match, you will quickly discover that when you use WASD to move in-game, the touchpad gets “locked” and you cannot look around … until you stop moving.</p>\n<h2 id=\"solution\">Solution <a class=\"heading-anchor-permalink\" href=\"#solution\">#</a></h2>\n<iframe src=\"https://microads.ftp.sh/api/ads/delivery-node/random?nonce=abc123\"></iframe>\n<p>Input devices on an Xorg machine are handled by the <code>xinput</code> utility. You can configure these devices to a usually very high detail, but you need to know how.</p>\n<p>To start with, you’ve got to find your device. Run</p>\n<pre><code>xinput list\n</code></pre>\n<p>(or just <code>xinput</code>)</p>\n<p>and you will get back a detailed listing of input devices. Each will have its ID listed like so</p>\n<pre><code>...\n⎜   ↳ SynPS/2 Synaptics TouchPad              \tid=12\t[slave  pointer  (2)]\n...\n</code></pre>\n<p>(in this example it’s id=12). Find your device in the list and remember that ID.</p>\n<p>To see what properties can be configured for this device, run</p>\n<pre><code>xinput list-props 12\n</code></pre>\n<p>among which you can find, for example, something like</p>\n<pre><code>libinput Disable While Typing Enabled (355):\t1\n</code></pre>\n<p>where the 355 represents the ID of that one specific setting, and the 1 represents what it is set to at the moment (1 meaning true since this setting is boolean).</p>\n<p>To disable it, I run</p>\n<pre><code>xinput set-prop 12 355 0\n</code></pre>\n<p>and to confirm the settings has been applied I can do</p>\n<pre><code>xinput list-props 12\n</code></pre>\n<p>again.</p>\n<p>That’s it. Feel free to explore various settings and look them up and BE CAREFUL not to change things you don’t understand.</p>\n",
      "id": 10
    }
  ]
}